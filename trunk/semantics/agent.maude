---load ../syntax/syntax

mod AGENT-ITEM is
  including CONFIGURATION .
  including SET{MraName} .
  sort AgentItem TaskId .
  op _->_ : GapName TaskName -> TaskId .
  op <task-id>_</task-id> : TaskId -> AgentItem [format (ni o o o) ] .
--- which task it is about?
  
  op <open-interfaces>_</open-interfaces> : Set{Interface} -> AgentItem [format (ni++ o -- o) ] .
--- can they connect?

  op <required-ops>_</required-ops> : Set{Operation} -> AgentItem [format (ni++ o -- o) ] . 
--- what is still needed?

  op <layout-mra>_</layout-mra> : Set{MraItem} -> AgentItem  [format (ni++ o -- o) ] . 


  op <provided-skills>_</provided-skills> 
--- combined skills of all the mras which are already in the coalition

     :  Set{Skill} -> AgentItem [format (ni++ o -- o) ] .
  op <coalition>_</coalition> : Set{MraName} -> AgentItem [format (ni++ o n--i o)].
--- these are the names of all the mras in the coalition
endm

view AgentItem from TRIV to AGENT-ITEM is sort Elt to AgentItem . endv
view TaskId from TRIV to AGENT-ITEM is sort Elt to TaskId . endv



mod AGENT is 
  including SET{AgentItem} .
  sort Agent .
  op <agent>_</agent> : Set{AgentItem} -> Agent [format (ni++ o n--i o) ] . 
  sort State .
  op <state>_</state> : State -> Agent .
  ops layout derive-lsai : -> State .

  op getTaskId : Agent -> TaskId .
  eq getTaskId(<agent> <task-id>  TID </task-id> Agent </agent>) = TID .
  var Agent : Set{AgentItem} .
  var TID : TaskId .


  op getProvidedSkills : Agent -> Set{Skill} .
  eq getProvidedSkills(<agent> Agent <provided-skills> Skills </provided-skills> </agent>) = Skills .

  var Skills : Set{Skill} .
endm
view Agent from TRIV to AGENT is sort Elt to Agent . endv

mod AGENTS is 
  including SET{Agent} .
  including LIST{Agent} .
  including RAT .
  op t : Rat -> TaskName [ditto] .

  op <agents>_</agents> : Set{Agent} -> ConfigItem .


endm
