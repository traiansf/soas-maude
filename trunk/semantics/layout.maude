--- lets the modules / coalitions choose positions in the layout

mod LAYOUT is 
 including AGENTS .
 sort LayoutDirection .
 ops north south east west : -> LayoutDirection .


 op assignPositions : Set{Agent} Position -> [Set{Agent}] .
 eq assignPositions(SAgents, FloorEnd)
  = assignPositions(sortedList(SAgents), empty, (0,0,0), east, FloorEnd) .
 
 op assignPositions : List{Agent} Set{Agent} Position LayoutDirection Position -> [Set{Agent}] .
 op assignPositions : List{Agent} Set{Agent} Position LayoutDirection Position TaskId -> [Set{Agent}] .

 eq assignPositions(nil, PAgents, (X, Y, Z), D, (XE, YE, ZE), TID)
  = PAgents <state> derive-lsai </state> .

 eq assignPositions((<agent>  <task-id> gap -> t(1) </task-id> <coalition> unassigned-human </coalition> AgentIs1 </agent>,Agents), PAgents, P1, D, P2)
  = <agent>  <task-id> gap -> t(1) </task-id> <coalition> unassigned-human </coalition> AgentIs1 </agent> assignPositions(Agents, PAgents, P1, D, P2, getTaskId(head(Agents))) .

 eq assignPositions(Agents, PAgents, P1, D, P2)
  = assignPositions(Agents, PAgents, P1, D, P2, getTaskId(head(Agents))) [owise] .

ceq assignPositions(Agents, PAgents, (X, Y, Z), east, (XE, YE, ZE), gap -> t(N))
  = assignPositions(Agents, PAgents
       <agent> 
        <task-id>  gap -> t(N + 1/4) </task-id> 
        <layout-mra>
          <type> conveyor </type> 
          <subtype> corner </subtype> 
          <position> (X,Y,Z) </position> 
          <angle> [0,0,0] </angle>
        </layout-mra> 
      </agent> 
      <agent> 
        <task-id>  gap -> t(N + 1/2) </task-id> 
        <layout-mra> 
          <type> conveyor </type> 
          <subtype> linear </subtype> 
          <position> (X,Y + conveyor-width,Z) </position> 
          <angle> [-90,0,0] </angle>
        </layout-mra> 
      </agent>
      <agent> 
        <task-id>  gap -> t(N + 3/4) </task-id> 
        <layout-mra> 
          <type> conveyor </type> 
          <subtype> corner </subtype> 
          <position> (X,Y + conveyor-width + conveyor-length,Z) </position> 
          <angle> [-90,0,0] </angle>
        </layout-mra> 
      </agent> 
   , (X, Y + conveyor-length + 2 * conveyor-width, Z), west, (XE, YE, ZE))
 if X + conveyor-length + conveyor-width > XE 
 /\ Y + conveyor-length + 2 * conveyor-width <= YE .

ceq assignPositions(Agents, PAgents, (X, Y, Z), west, (XE, YE, ZE), gap -> t(N))
  = assignPositions(Agents, PAgents
       <agent> 
        <task-id>  gap -> t(N + 1/4) </task-id> 
        <layout-mra> 
          <type> conveyor </type> 
          <subtype> corner </subtype> 
          <position> (X - conveyor-width,Y - conveyor-width,Z) </position> 
          <angle> [90,0,0] </angle>
        </layout-mra> 
      </agent> 
      <agent> 
        <task-id>  gap -> t(N + 1/2) </task-id> 
        <layout-mra> 
          <type> conveyor </type> 
          <subtype> linear </subtype> 
          <position> (X - conveyor-width,Y,Z) </position> 
          <angle> [-90,0,0] </angle>
        </layout-mra> 
      </agent>
      <agent> 
        <task-id>  gap -> t(N + 3/4) </task-id> 
        <layout-mra> 
          <type> conveyor </type> 
          <subtype> corner </subtype> 
          <position> (X - conveyor-width,Y + conveyor-length,Z) </position> 
          <angle> [180,0,0] </angle>
        </layout-mra> 
      </agent> 
   , (X, Y + conveyor-length, Z), east, (XE, YE, ZE))
 if X - conveyor-length - conveyor-width < 0 
 /\ Y + conveyor-length + conveyor-width <= YE .


ceq assignPositions((<agent>  <task-id> TID </task-id> AgentIs1 </agent>,Agents), PAgents, (X, Y, Z), east, (XE, YE, ZE), T)
  = assignPositions(Agents, PAgents
    <agent>
       <task-id> TID </task-id> 
      <layout-mra>
        <type> conveyor </type>
        <subtype> linear </subtype>
        <position> (X,Y,Z) </position>
        <angle> [0,0,0] </angle>
      </layout-mra>
    </agent>
    <agent> AgentIs1  <task-id> TID </task-id> 
      <layout-mra>
        <position> ((X + conveyor-length) - 2 * mra-width,Y + conveyor-width,Z) </position>
        <angle> [0,0,0] </angle>
      </layout-mra>
    </agent>
,   (X + conveyor-length, Y,Z), east, (XE, YE, ZE), TID)
 if  X + conveyor-length + conveyor-width <= XE .


ceq  assignPositions((<agent> <task-id> TID </task-id> AgentIs1 </agent>,Agents), PAgents, (X, Y, Z), west, (XE, YE, ZE), T)
  = assignPositions(Agents, PAgents
    <agent>
       <task-id> TID </task-id> 
      <layout-mra>
        <type> conveyor </type>
        <subtype> linear </subtype>
        <position> (X - conveyor-length,Y - conveyor-width,Z) </position>
        <angle> [180,0,0] </angle>
      </layout-mra>
    </agent>
    <agent>  <task-id> TID </task-id> AgentIs1
      <layout-mra>
        <position> (X - conveyor-length,Y - conveyor-width - mra-width,Z) </position>
        <angle> [180,0,0] </angle>
      </layout-mra>
    </agent>
 ,  (X - conveyor-length, Y,Z), west, (XE, YE, ZE), TID)
 if  X - conveyor-length - conveyor-width >= 0 .


  rl <config> <agents> <state> layout </state> SAgents </agents> Cfg </config>
  => <config> <agents> assignPositions(SAgents, (1000,10000,0)) </agents> Cfg </config> .

  var Agents : List{Agent} . var PAgents SAgents : Set{Agent} . var Agent Agent' : Agent . var X Y Z XE YE ZE : Int . var FloorEnd P1 P2 : Position .  var D : LayoutDirection .  var N : Rat . var AgentIs1 AgentIs2 : Set{AgentItem} .
var gap : GapName .  var Cfg : Set{ConfigItem} .  var TID T : TaskId . 
endm
