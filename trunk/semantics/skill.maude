---(
load ../syntax/list
load ../syntax/set
load ../syntax/skill
---)

mod DECOMPOSE-SKILLS is
  including SET{Skill} .
  op decompose : Set{Skill} -> Set{Skill} .
  op decompose1 : Skill -> Set{Skill} .
 
  var Skill : Skill . var Skills : Set{Skill} . 
  var SItems : Set{SkillItem} .
  vars I1 I2 I3 : Int .  vars F1 F2 F3 : Float .

  op getMoveItems : Set{SkillItem} -> Set{SkillItem} .
  eq getMoveItems(<move-range> F1 </move-range> SItems)
   = <range> F1 </range> getMoveItems(SItems) .
  eq getMoveItems(SItems) = empty [owise] .
  
  op getOCItems : Set{SkillItem} -> Set{SkillItem} .
  eq getOCItems(<open-range> F1 </open-range> SItems)
   = <range> F1 </range> getMoveItems(SItems) .
  eq getOCItems(SItems) = empty [owise] .
  
  op getPCItems : Set{SkillItem} -> Set{SkillItem} .
  eq getPCItems(SItems) = empty [owise] .
  
  op getStoreItems : Set{SkillItem} -> Set{SkillItem} .
  eq getStoreItems(<count> I1 </count> SItems)
   = <count> I1 </count> getStoreItems(SItems) .
  eq getStoreItems(SItems) = empty [owise] .
  
  eq decompose(Skill Skills) = decompose1(Skill) decompose(Skills) .
  eq decompose(empty) = empty .
  eq decompose1(<skill> <type> pick&place </type> SItems </skill>) 
   = <skill> <type> open-close </type> getOCItems(SItems) </skill>
     <skill> <type> move </type> getMoveItems(SItems) </skill> .
  eq decompose1(<skill> <type> load-unload-gripper </type> SItems </skill>)
   = decompose1(<skill> <type> pick&place </type> SItems </skill>)
     <skill> <type> store </type> <subtype> grippers </subtype> getStoreItems(SItems) </skill> .
  eq decompose1(<skill> <type> index-carrier-for-task </type> SItems </skill>)
   =  <skill> <type> move </type> getMoveItems(SItems) </skill> 
      <skill> <type> position-carrier </type> getPCItems(SItems) </skill> .
  eq decompose1(Skill) = Skill [owise] .
endm

mod MATCH-SKILLS is
  including SET{Skill} .

  var F1 F2 : Float .
  var I1 I2 : Int . 
  vars Skills1 Skills2 : Set{Skill} . var Skill : Skill .
  vars Skill1 Skill2 : Set{SkillItem} .  var SItem : SkillItem .
  var SType : SkillType .

  op match : Set{Skill} Set{Skill} -> [Bool] .
  eq match(Skill Skills1, Skill Skills2) = true .
  ceq match(<skill> <type> SType </type> Skill1 </skill> Skills1, <skill> <type> SType </type> Skill2 </skill> Skills2) = true
    if matchSkillItems(Skill1, Skill2) .
  op matchSkillItems : Set{SkillItem} Set{SkillItem} -> [Bool] .
--- TODO: this one is normally called
  eq matchSkillItems(Skill1, empty) = false .
--- TODO: There we want to compare ranges, but this method is never called.
  eq matchSkillItems(Skill1, Skill2) = true .
  ---   if matchSkillItems(Skill1, Skill2) .
--- add more matching rules here by need.
  eq match(Skills1, Skills2) = false [owise] .

---  op matchSkillItems : Set{SkillItem} Set{SkillItem} -> [Bool] .
---  eq matchSkillItems(Skill1, empty) = true .
---  eq matchSkillItems(SItem Skill1, SItem Skill2) = matchSkillItems(Skill1, Skill2) .
---  eq matchSkillItems(SItem Skill1, SItem Skill2) = false .
--- this was outcommented
---  eq matchSkillItems(<range> F1 </range> Skill1, <range> F2 </range> Skill2 )   = false .
   --- if F1 > F2 then matchSkillItems(Skill1,Skill2) else false fi .
--- F1 is the gripper's opening range
--- F2 is the distance between the gripping points on the part to be gripped
   
endm

mod SUBSTRACT-SKILLS is
  including MATCH-SKILLS .
  op substract : Set{Skill} Set{Skill} -> Set{Skill} .

  var Skill : Skill . vars Skills Skills1 Skills2 : Set{Skill} .
  var SType : SkillType .  var SItems1 SItems2 : Set{SkillItem} .
  vars I I1 I2 : Int .

  eq substract(Skill Skills1, Skill Skills2) = substract(Skills1, Skills2) .
---(
  eq substract(Skills1, move(Any(I)) Skills2)
   = substract(Skills1 \ largestMove(Skills1, Any(I)), Skills2) . 
---)
  ceq substract(<skill> <type> SType </type> SItems1 </skill> Skills1, <skill> <type> SType </type> SItems2 </skill> Skills2)
    = substract(Skills1, Skills2) 
   if matchSkillItems(SItems2, SItems1) .
---	if vgl(SItems2, SItems1) .
  eq substract(Skills1, Skills2) = Skills1 [owise] .
 
---( 
  op largestMove : Set{Skill} PreSkill -> Set{Skill} .
  ceq largestMove(<skill> <type> move </type> <range> I1 </range> SItems </skill> Skills, Any(I2)) = largestMove(Skills, Any(I2), I1) if I1 <= I2 .
  ceq largestMove(move(anySubType(I1)) Skills, Any(I2)) = largestMove(Skills, Any(I2), I1) if I1 <= I2 .
  eq largestMove(Skills, Any(I2)) = empty [owise] .
  op largestMove : Set{Skill} PreSkill Int -> Set{Skill} .
  eq largestMove(move(Any(I1)) Skills, Any(I2), I) = largestMove(Skills, Any(I2), 
      if (I1 > I and I1 <= I2) then I1 else  I fi) .
  eq largestMove(move(anySubType(I1)) Skills, Any(I2), I) = largestMove(Skills, Any(I2), 
      if (I1 > I and I1 <= I2) then I1 else  I fi) .
  eq largestMove(Skills, Any(I2), I) = move(Any(I)) [owise] .
---)
endm
 

